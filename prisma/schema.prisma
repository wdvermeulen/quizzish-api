// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  room          Room?
  games         Game[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  startCode String   @id
  hostIds   Host[]
  gameId    String   @unique
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Host {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(128)
  peerId    String   @unique @db.VarChar(64)
  roomId    String
  userId    String
  room      Room     @relation(fields: [roomId], references: [startCode], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roomId, name])
  @@unique([userId, id])
}

model Game {
  name               String?  @db.VarChar(64)
  description        String?  @db.VarChar(1024)
  type               GameType @default(CUSTOM)
  timeLimitInMinutes Int      @default(1440)
  rounds             Round[]
  room               Room?
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, id])
}

model Round {
  name                   String?                @db.VarChar(128)
  description            String?                @db.VarChar(1024)
  index                  Int
  slides                 Slide[]
  timeLimitInMinutes     Int?
  navigationMode         NavigationMode         @default(TOGETHER)
  checkAfter             Boolean                @default(false)
  nextRoundPossibilities NextRoundPossibility[]
  gameId                 String
  game                   Game                   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  previousRound          NextRoundPossibility[] @relation("NextRound")
  userId                 String
  id                     String                 @id @default(cuid())
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt

  @@unique([userId, id])
  @@index([gameId])
}

model NextRoundPossibility {
  conditions  Condition[]
  nextRoundId String
  nextRound   Round       @relation("NextRound", fields: [nextRoundId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roundId     String
  round       Round       @relation(fields: [roundId], references: [id], onDelete: Cascade)
  userId      String
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([roundId])
  @@index([nextRoundId])
}

model Condition {
  conditionType          ConditionType
  comparisonType1        ComparisonType
  comparisonType2        ComparisonType?
  logicOperator          LogicOperator?
  comparisonValue1       Int
  comparisonValue2       Int?
  nextRoundPossibilityId String?
  nextRoundPossibility   NextRoundPossibility? @relation(fields: [nextRoundPossibilityId], references: [id], onDelete: Cascade)
  nextSlidePossibilityId String?
  nextSlidePossibility   NextSlidePossibility? @relation(fields: [nextSlidePossibilityId], references: [id], onDelete: Cascade)
  userId                 String
  id                     String                @id @default(cuid())
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  @@index([nextRoundPossibilityId])
  @@index([nextSlidePossibilityId])
}

model Slide {
  name                         String?                @db.VarChar(128)
  description                  String?                @db.VarChar(512)
  type                         SlideType              @default(NO_ANSWER)
  timeLimitInSeconds           Int?
  multipleChoiceOptions        MultipleChoiceOption[]
  closestToValue               BigInt?
  checkMethod                  CheckMethod            @default(AUTOMATIC)
  pointMethod                  PointMethod            @default(NONE)
  explanation                  String?                @db.VarChar(512)
  largeText                    String?                @db.Text
  media                        String?                @db.VarChar(128)
  images                       Image[]
  index                        Int
  checkAfter                   Boolean                @default(true)
  voters                       Voters                 @default(ALL_PARTICIPANTS)
  earlyCorrectPoints           Int                    @default(10)
  lateCorrectPoints            Int                    @default(0)
  earlyIncorrectPoints         Int                    @default(0)
  lateIncorrectPoints          Int                    @default(0)
  nextSlidePossibilities       NextSlidePossibility[]
  roundId                      String
  round                        Round                  @relation(fields: [roundId], references: [id], onDelete: Cascade)
  userId                       String
  id                           String                 @id @default(cuid())
  createdAt                    DateTime               @default(now())
  updatedAt                    DateTime               @updatedAt
  PreviousSlidePossibility     NextSlidePossibility[] @relation("NextSlidePossibility")
  PreviousMultipleChoiceOption MultipleChoiceOption[] @relation("NextSlideMultipleChoice")

  @@unique([userId, id])
  @@index([roundId])
}

model NextSlidePossibility {
  conditions  Condition[]
  nextSlideId String
  nextSlide   Slide       @relation("NextSlidePossibility", fields: [nextSlideId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  slideId     String
  slide       Slide       @relation(fields: [slideId], references: [id], onDelete: Cascade)
  userId      String
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([userId, id])
  @@index([slideId])
  @@index([nextSlideId])
}

model MultipleChoiceOption {
  description String?  @db.VarChar(512)
  earlyPoints Int?     @default(10)
  latePoints  Int?     @default(0)
  isRegex     Boolean  @default(false)
  index       Int      @unique
  nextSlideId String?
  nextSlide   Slide?   @relation("NextSlideMultipleChoice", fields: [nextSlideId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  slideId     String
  slide       Slide    @relation(fields: [slideId], references: [id], onDelete: Cascade)
  userId      String
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, id])
  @@index([slideId])
  @@index([nextSlideId])
}

model Image {
  image     String   @db.VarChar(128)
  slide     Slide    @relation(fields: [slideId], references: [id], onDelete: Cascade)
  index     Int
  slideId   String
  userId    String
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, id])
  @@index([slideId])
}

enum GameType {
  REGULAR_QUIZ
  PUBQUIZ
  ESCAPE_ROOM
  CUSTOM
}

enum NavigationMode {
  TOGETHER
  INDIVIDUAL
  INDIVIDUAL_ROUTES
}

enum SlideType {
  NO_ANSWER
  MULTIPLE_CHOICE
  TRUE_FALSE
  OPEN
  MULTIPLE_SELECT
  CLOSEST_TO
  SORT
  CATEGORIZE
  PAIR
  POLL
}

enum ConditionType {
  GAME_TIME
  ROUND_TIME
  SLIDE_TIME
  ORDER
  POINTS
  RANKINGS
  IS_CORRECT
  IS_INCORRECT
  PARTICIPANTS
  PARTICIPANTS_WITH_POINTS
  REPEATS
}

enum LogicOperator {
  AND
  OR
}

enum ComparisonType {
  SMALLEST
  SMALLER
  SMALLER_EQUALS
  EQUALS
  GREATER_EQUALS
  GREATER
  GREATEST
}

enum PointMethod {
  TIME
  ORDER
  NONE
}

enum CheckMethod {
  MANUAL
  AUTOMATIC
  VOTE
  POLL
  MOST_ANSWERED
  NONE
}

enum Voters {
  HOSTS
  SELECTED_PARTICIPANT
  RANDOM_PARTICIPANT
  ALL_PARTICIPANTS
  GUESTS
}

enum VoteType {
  SINGLE_VOTE // Each player, host, or participant casts a single vote for their preferred answer. This is a simple and straightforward method where each voter can choose only one option.
  MULTIPLE_VOTES // Each voter can cast multiple votes, either for multiple answers or multiple times for the same answer. This allows participants to express their preferences for multiple options to different answers.
  RANKED_VOTING
  INSTANT_RUNOFF_VOTING // Also known as ranked choice voting, this method allows participants to rank the answers in order of preference. The answer with the most first-place votes wins, but if no answer receives a majority, the lowest-ranked answer is eliminated, and its votes are redistributed to the remaining answers. This process continues until a single answer receives a majority of votes.
  WEIGHTED_VOTING // Each voter is assigned a certain number of points or weight, and they can distribute these points among the answers based on their preferences. This allows participants to allocate their votes in a more flexible manner, assigning more points to their preferred answer and fewer points to other answers.
}
