// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  room          Room?
  quizzes       Quiz[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  startCode String   @id @unique
  hostIds   Host[]
  quizId    String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Host {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(128)
  peerId    String   @unique
  roomId    String
  room      Room     @relation(fields: [roomId], references: [startCode], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id        String   @id @default(cuid())
  type      String   @db.VarChar(64)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String   @db.VarChar(256)
  rounds    Round[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Round {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(128)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  slides    Slide[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Slide {
  id            String         @id @default(cuid())
  type          String         @db.VarChar(64)
  name          String         @db.VarChar(128)
  roundId       String
  round         Round          @relation(fields: [roundId], references: [id], onDelete: Cascade)
  seconds       Int
  question      String         @db.VarChar(512)
  answerOptions AnswerOption[]
  answer        String         @db.VarChar(512)
  largeText     String         @db.VarChar(8192)
  media         String         @db.VarChar(128)
  images        Image[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model AnswerOption {
  id         String @id @default(cuid())
  slideId    String
  slide      Slide  @relation(fields: [slideId], references: [id], onDelete: Cascade)
  option     String @db.VarChar(512)
  maxReward  Int    @default(100)
  minReward  Int    @default(0)
  maxPenalty Int    @default(100)
  minPenalty Int    @default(0)
}

model Image {
  id      String @id @default(cuid())
  slideId String
  slide   Slide  @relation(fields: [slideId], references: [id], onDelete: Cascade)
  image   String @db.VarChar(128)
}
