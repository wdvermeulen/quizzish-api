// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  room          Room?
  games         Game[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  startCode String   @id
  hostIds   Host[]
  gameId    String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Host {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(128)
  peerId    String   @unique @db.VarChar(64)
  roomId    String
  userId    String
  room      Room     @relation(fields: [roomId], references: [startCode], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roomId, name])
  @@unique([userId, id])
}

model Game {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type               GameType @default(CUSTOM)
  name               String?  @db.VarChar(64)
  description        String?  @db.VarChar(1024)
  rounds             Round[]
  timeLimitInMinutes Int      @default(1440)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, id])
}

model Round {
  id                 String   @id @default(cuid())
  name               String?  @db.VarChar(128)
  userId             String
  gameId             String
  game               Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  index              Int
  nextRoundId        String?
  nextRound          Round?   @relation("NextRound", fields: [nextRoundId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  previousRound      Round[]  @relation("NextRound")
  slides             Slide[]
  timeLimitInMinutes Int?
  description        String?  @db.VarChar(1024)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, id])
}

model Slide {
  id                 String         @id @default(cuid())
  userId             String
  index              Int
  type               SlideType      @default(TEXT)
  name               String?        @db.VarChar(128)
  roundId            String
  round              Round          @relation(fields: [roundId], references: [id], onDelete: Cascade)
  timeLimitInSeconds Int?
  description        String?        @db.VarChar(512)
  previousAnswer     AnswerOption[] @relation("NextSlide")
  answerOptions      AnswerOption[]
  manualCheck        Boolean        @default(false)
  instantCheck       Boolean        @default(true)
  explanation        String?        @db.VarChar(512)
  largeText          String?        @db.Text
  media              String?        @db.VarChar(128)
  images             Image[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@unique([userId, id])
}

model AnswerOption {
  id            String  @id @default(cuid())
  index         Int
  userId        String
  slideId       String
  slide         Slide   @relation(fields: [slideId], references: [id], onDelete: Cascade)
  nextSlideId   String?
  nextSlide     Slide?  @relation("NextSlide", fields: [nextSlideId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  description   String? @db.VarChar(512)
  numericAnswer Int?
  isCorrect     Boolean @default(false)
  earlyPoints   Int?    @default(10)
  latePoints    Int?    @default(0)

  @@unique([userId, id])
}

model Image {
  id      String @id @default(cuid())
  index   Int
  userId  String
  slideId String
  slide   Slide  @relation(fields: [slideId], references: [id], onDelete: Cascade)
  image   String @db.VarChar(128)

  @@unique([userId, id])
}

enum GameType {
  REGULAR_QUIZ
  PUBQUIZ
  ESCAPE_ROOM
  CUSTOM
}

enum SlideType {
  TEXT
  MULTIPLE_CHOICE
  TRUE_FALSE
  OPEN
  MULTIPLE_SELECT
  PUZZLE
}
